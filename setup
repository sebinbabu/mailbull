#!/usr/bin/env bash

ETC_HOSTS=/etc/hosts
PWD=$(pwd)
PUBLIC_IP=$(curl -s ifconfig.me)
PRIVATE_IP=$(ip route get 1 | awk '{print $NF;exit}')
USERID=$(id -u)
YUM="/usr/bin/yum -y"

read -p 'Enter domain name: ' DOMAIN
read -p 'Enter admin email: ' EMAIL

HOSTNAME=mail.$DOMAIN

MAILDOMAIN="mail.$DOMAIN"
IMAPDOMAIN="imap.$DOMAIN"
SMTPDOMAIN="smtp.$DOMAIN"

POSTMASTEREMAIL="postmaster@$DOMAIN"

DB_PASS=$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c15)
DB_ROOT_PASS=$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c15)
USER_PASS=$(tr -dc _A-Z-a-z-0-9 < /dev/urandom | head -c8)

if [[ $1 = "-v" ]]; then
	OUT="/dev/stdout"
else
	OUT="$PWD/setup.log"
fi

# desplays user info
function display_info() {
	echo
	echo -e ":: Installation Details ::"
	echo -e "\tPublic IP: $PUBLIC_IP"
	echo -e "\tPrivate IP: $PRIVATE_IP"
	echo -e "\tHostname: $HOSTNAME"
	echo
	echo -e "\tDomain name: $DOMAIN"
	echo -e "\tSMTP host: $DOMAIN"
	echo -e "\tSMTP port: 587"
	echo -e "\tIMAP host: $DOMAIN"
	echo -e "\tIMAP port: 993 or 143"
	echo
	echo -e "\tAdmin email: $EMAIL"
	echo -e "\tPostmaster email: $POSTMASTEREMAIL"
	echo -e "\tPostmaster password: $USER_PASS"
	echo
	echo -e "\tMySQL root user: root"
	echo -e "\tMySQL root password: $DB_ROOT_PASS"
	echo -e "\tMySQL email db user: vmail"
	echo -e "\tMySQL email db pass: $DB_PASS"
	echo
	echo -e "\tSetup log saved at setup.log"
	echo
}

# checks if root access is granted
function checkroot() {
	if [[ $USERID -ne 0 ]]; then
		echo "This script must be run as root"
		exit 1
	fi
}
 
# sets up a mysql database server
function setup_db() {
	$YUM update
	$YUM install mariadb-server mariadb-client
	
	systemctl enable mariadb
	systemctl start mariadb

	sed "s/<DB_ROOT_PASS>/$DB_ROOT_PASS/g" $PWD/sqls/mysql_secure_installation.sql | mysql -sfu root
	sed "s/<DB_PASS>/$DB_PASS/g" $PWD/sqls/db.sql | mysql -sfu root -p$DB_ROOT_PASS
}


# adds entry to hosts
function addhost() {
	IP=$1
	DOMAIN=$2
	HOSTNAME=$3

	HOSTS_LINE="$IP\t$DOMAIN\t$HOSTNAME"
	if [ -n "$(grep $HOSTNAME $ETC_HOSTS)" ]
	then
		echo "$HOSTNAME already exists : $(grep $HOSTNAME $ETC_HOSTS)"
	else
		echo "Adding $HOSTNAME to your $ETC_HOSTS";
		sudo -- sh -c -e "echo -e '$HOSTS_LINE' >> $ETC_HOSTS";

	if [ -n "$(grep $HOSTNAME $ETC_HOSTS)" ]
		then
			echo -e "$HOSTNAME was added succesfully \n $(grep $HOSTNAME $ETC_HOSTS)";
		else
			echo -e "Failed to Add $HOSTNAME, Try again!";
		fi
	fi
}

# Setup Certbot & TLS certificates for the domain supplied
function setup_certbot() {
	curl -s https://dl.eff.org/certbot-auto > $PWD/certbot-auto
	chmod a+x $PWD/certbot-auto
	$PWD/certbot-auto certonly --standalone --debug -d $DOMAIN -n --agree-tos -m $EMAIL
}

# Setup users & maildirectories
function setup_maildir() {
	mkdir /var/vmail/
	mkdir /var/vmail/mailboxes

	groupadd vmail
	useradd -d /var/vmail -g vmail -s /sbin/nologin -M vmail

	chown -R vmail /var/vmail
	chgrp -R vmail /var/vmail
	chmod -R 770 /var/vmail
}

# Setup Postfix
function setup_postfix() {
	$YUM update
	$YUM install postfix

	# Disable selinux temporarily and permanantly
	# selinux will be permanantly disables on reboot
	setenforce 0
	sed -i 's/enforcing/disabled/g' /etc/sysconfig/selinux
	sed -i 's/enforcing/disabled/g' /etc/selinux/config

	addhost $PRIVATE_IP $DOMAIN $HOSTNAME
	echo $(hostname -f) > /etc/mailname
	
	systemctl stop postfix
	systemctl enable postfix

	rm /etc/postfix/{master.cf,main.cf}
	mkdir -p /etc/postfix/sql

	sed "s/<DOMAIN>/$DOMAIN/g; s/<PRIVATE_IP>/$PRIVATE_IP/g; s/<HOSTNAME>/$HOSTNAME/g" $PWD/confs/postfix/main.cf > /etc/postfix/main.cf

	cp $PWD/confs/postfix/master.cf /etc/postfix/master.cf
	cp $PWD/confs/postfix/submission_header_cleanup /etc/postfix/submission_header_cleanup

	for filename in $PWD/confs/postfix/sql/*.cf; do
    		[ -e "$filename" ] || continue
		sed "s/<DB_PASS>/$DB_PASS/g" $filename > /etc/postfix/sql/$(basename "$filename")		
 	done

	chmod -R 640 /etc/postfix/sql

	# fixing up chroot and permissions
	mkdir -p /var/spool/postfix/etc
	cp /etc/services /var/spool/postfix/etc/services
	cp /etc/resolv.conf /var/spool/postfix/etc/resolv.conf
	chown -R postfix /var/spool/postfix/etc	

	newaliases
}

# Setup Dovecot
function setup_dovecot() {
	$YUM update
	$YUM install dovecot dovecot-mysql
	
	systemctl enable dovecot
	systemctl stop dovecot

	# remove all default configuration
	rm -r /etc/dovecot/*

	sed "s/<DOMAIN>/$DOMAIN/g; s/<POSTMASTEREMAIL>/$POSTMASTEREMAIL/g" $PWD/confs/dovecot/dovecot.conf > /etc/dovecot/dovecot.conf
	sed "s/<DB_PASS>/$DB_PASS/g" $PWD/confs/dovecot/dovecot-sql.conf > /etc/dovecot/dovecot-sql.conf
	chmod 440 /etc/dovecot/dovecot-sql.conf	  
}

# Save configuration
function save_conf() {
	echo "DOMAIN=$DOMAIN" >> .conf
	echo "DB_PASS=$DB_PASS" >> .conf
	echo "DB_ROOT_PASS=$DB_ROOT_PASS" >> .conf
	echo "USER_PASS=$USER_PASS" >> .conf
	
	chmod 600 .conf
	chown root .conf
}

# creates postmaster user and domain db entries
function db_conf() {
	bash $PWD/add_domain $DOMAIN
	bash $PWD/add_user postmaster $DOMAIN $USER_PASS
}



# Main procedure
echo ":: Install begin : $(date) ::" > "$OUT"

echo " : checking root access :"
checkroot 2>&1 >> "$OUT"

echo " : installing mysql and setting up databases : "
setup_db 2>&1 >> "$OUT"

echo " : setting up email directory and users : "
setup_maildir 2>&1 >> "$OUT" 

echo " : generating and signing certificates : "
setup_certbot 2>&1 >> "$OUT"

echo " : installing and setting up Dovecot MDA : "
setup_dovecot 2>&1 >> "$OUT"

echo " : installing and setting up Postfix MTA : "
setup_postfix 2>&1 >> "$OUT"

echo " : saving configuration to .conf : "
save_conf 2>&1 >> "$OUT"

echo " : creating user and domain entries : "
db_conf 2>&1 >> "$OUT"

display_info

echo ":: Install end : $(date) ::" >> "$OUT"
